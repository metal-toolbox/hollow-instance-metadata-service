// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// InstanceMetadatum is an object representing the database table.
type InstanceMetadatum struct {
	ID        string     `boil:"id" json:"id" toml:"id" yaml:"id"`
	Metadata  types.JSON `boil:"metadata" json:"metadata" toml:"metadata" yaml:"metadata"`
	CreatedAt time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time  `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *instanceMetadatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L instanceMetadatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InstanceMetadatumColumns = struct {
	ID        string
	Metadata  string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Metadata:  "metadata",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var InstanceMetadatumTableColumns = struct {
	ID        string
	Metadata  string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "instance_metadata.id",
	Metadata:  "instance_metadata.metadata",
	CreatedAt: "instance_metadata.created_at",
	UpdatedAt: "instance_metadata.updated_at",
}

// Generated where

type whereHelpertypes_JSON struct{ field string }

func (w whereHelpertypes_JSON) EQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_JSON) NEQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_JSON) LT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_JSON) LTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_JSON) GT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_JSON) GTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var InstanceMetadatumWhere = struct {
	ID        whereHelperstring
	Metadata  whereHelpertypes_JSON
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "\"instance_metadata\".\"id\""},
	Metadata:  whereHelpertypes_JSON{field: "\"instance_metadata\".\"metadata\""},
	CreatedAt: whereHelpertime_Time{field: "\"instance_metadata\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"instance_metadata\".\"updated_at\""},
}

// InstanceMetadatumRels is where relationship names are stored.
var InstanceMetadatumRels = struct {
}{}

// instanceMetadatumR is where relationships are stored.
type instanceMetadatumR struct {
}

// NewStruct creates a new relationship struct
func (*instanceMetadatumR) NewStruct() *instanceMetadatumR {
	return &instanceMetadatumR{}
}

// instanceMetadatumL is where Load methods for each relationship are stored.
type instanceMetadatumL struct{}

var (
	instanceMetadatumAllColumns            = []string{"id", "metadata", "created_at", "updated_at"}
	instanceMetadatumColumnsWithoutDefault = []string{"id", "created_at", "updated_at"}
	instanceMetadatumColumnsWithDefault    = []string{"metadata"}
	instanceMetadatumPrimaryKeyColumns     = []string{"id"}
	instanceMetadatumGeneratedColumns      = []string{}
)

type (
	// InstanceMetadatumSlice is an alias for a slice of pointers to InstanceMetadatum.
	// This should almost always be used instead of []InstanceMetadatum.
	InstanceMetadatumSlice []*InstanceMetadatum
	// InstanceMetadatumHook is the signature for custom InstanceMetadatum hook methods
	InstanceMetadatumHook func(context.Context, boil.ContextExecutor, *InstanceMetadatum) error

	instanceMetadatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	instanceMetadatumType                 = reflect.TypeOf(&InstanceMetadatum{})
	instanceMetadatumMapping              = queries.MakeStructMapping(instanceMetadatumType)
	instanceMetadatumPrimaryKeyMapping, _ = queries.BindMapping(instanceMetadatumType, instanceMetadatumMapping, instanceMetadatumPrimaryKeyColumns)
	instanceMetadatumInsertCacheMut       sync.RWMutex
	instanceMetadatumInsertCache          = make(map[string]insertCache)
	instanceMetadatumUpdateCacheMut       sync.RWMutex
	instanceMetadatumUpdateCache          = make(map[string]updateCache)
	instanceMetadatumUpsertCacheMut       sync.RWMutex
	instanceMetadatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var instanceMetadatumAfterSelectHooks []InstanceMetadatumHook

var instanceMetadatumBeforeInsertHooks []InstanceMetadatumHook
var instanceMetadatumAfterInsertHooks []InstanceMetadatumHook

var instanceMetadatumBeforeUpdateHooks []InstanceMetadatumHook
var instanceMetadatumAfterUpdateHooks []InstanceMetadatumHook

var instanceMetadatumBeforeDeleteHooks []InstanceMetadatumHook
var instanceMetadatumAfterDeleteHooks []InstanceMetadatumHook

var instanceMetadatumBeforeUpsertHooks []InstanceMetadatumHook
var instanceMetadatumAfterUpsertHooks []InstanceMetadatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *InstanceMetadatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range instanceMetadatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *InstanceMetadatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range instanceMetadatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *InstanceMetadatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range instanceMetadatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *InstanceMetadatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range instanceMetadatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *InstanceMetadatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range instanceMetadatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *InstanceMetadatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range instanceMetadatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *InstanceMetadatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range instanceMetadatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *InstanceMetadatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range instanceMetadatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *InstanceMetadatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range instanceMetadatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddInstanceMetadatumHook registers your hook function for all future operations.
func AddInstanceMetadatumHook(hookPoint boil.HookPoint, instanceMetadatumHook InstanceMetadatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		instanceMetadatumAfterSelectHooks = append(instanceMetadatumAfterSelectHooks, instanceMetadatumHook)
	case boil.BeforeInsertHook:
		instanceMetadatumBeforeInsertHooks = append(instanceMetadatumBeforeInsertHooks, instanceMetadatumHook)
	case boil.AfterInsertHook:
		instanceMetadatumAfterInsertHooks = append(instanceMetadatumAfterInsertHooks, instanceMetadatumHook)
	case boil.BeforeUpdateHook:
		instanceMetadatumBeforeUpdateHooks = append(instanceMetadatumBeforeUpdateHooks, instanceMetadatumHook)
	case boil.AfterUpdateHook:
		instanceMetadatumAfterUpdateHooks = append(instanceMetadatumAfterUpdateHooks, instanceMetadatumHook)
	case boil.BeforeDeleteHook:
		instanceMetadatumBeforeDeleteHooks = append(instanceMetadatumBeforeDeleteHooks, instanceMetadatumHook)
	case boil.AfterDeleteHook:
		instanceMetadatumAfterDeleteHooks = append(instanceMetadatumAfterDeleteHooks, instanceMetadatumHook)
	case boil.BeforeUpsertHook:
		instanceMetadatumBeforeUpsertHooks = append(instanceMetadatumBeforeUpsertHooks, instanceMetadatumHook)
	case boil.AfterUpsertHook:
		instanceMetadatumAfterUpsertHooks = append(instanceMetadatumAfterUpsertHooks, instanceMetadatumHook)
	}
}

// One returns a single instanceMetadatum record from the query.
func (q instanceMetadatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*InstanceMetadatum, error) {
	o := &InstanceMetadatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for instance_metadata")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all InstanceMetadatum records from the query.
func (q instanceMetadatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (InstanceMetadatumSlice, error) {
	var o []*InstanceMetadatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to InstanceMetadatum slice")
	}

	if len(instanceMetadatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all InstanceMetadatum records in the query.
func (q instanceMetadatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count instance_metadata rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q instanceMetadatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if instance_metadata exists")
	}

	return count > 0, nil
}

// InstanceMetadata retrieves all the records using an executor.
func InstanceMetadata(mods ...qm.QueryMod) instanceMetadatumQuery {
	mods = append(mods, qm.From("\"instance_metadata\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"instance_metadata\".*"})
	}

	return instanceMetadatumQuery{q}
}

// FindInstanceMetadatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInstanceMetadatum(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*InstanceMetadatum, error) {
	instanceMetadatumObj := &InstanceMetadatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"instance_metadata\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, instanceMetadatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from instance_metadata")
	}

	if err = instanceMetadatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return instanceMetadatumObj, err
	}

	return instanceMetadatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *InstanceMetadatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no instance_metadata provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(instanceMetadatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	instanceMetadatumInsertCacheMut.RLock()
	cache, cached := instanceMetadatumInsertCache[key]
	instanceMetadatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			instanceMetadatumAllColumns,
			instanceMetadatumColumnsWithDefault,
			instanceMetadatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(instanceMetadatumType, instanceMetadatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(instanceMetadatumType, instanceMetadatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"instance_metadata\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"instance_metadata\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into instance_metadata")
	}

	if !cached {
		instanceMetadatumInsertCacheMut.Lock()
		instanceMetadatumInsertCache[key] = cache
		instanceMetadatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the InstanceMetadatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *InstanceMetadatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	instanceMetadatumUpdateCacheMut.RLock()
	cache, cached := instanceMetadatumUpdateCache[key]
	instanceMetadatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			instanceMetadatumAllColumns,
			instanceMetadatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update instance_metadata, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"instance_metadata\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, instanceMetadatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(instanceMetadatumType, instanceMetadatumMapping, append(wl, instanceMetadatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update instance_metadata row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for instance_metadata")
	}

	if !cached {
		instanceMetadatumUpdateCacheMut.Lock()
		instanceMetadatumUpdateCache[key] = cache
		instanceMetadatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q instanceMetadatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for instance_metadata")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for instance_metadata")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InstanceMetadatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), instanceMetadatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"instance_metadata\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, instanceMetadatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in instanceMetadatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all instanceMetadatum")
	}
	return rowsAff, nil
}

// Delete deletes a single InstanceMetadatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *InstanceMetadatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no InstanceMetadatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), instanceMetadatumPrimaryKeyMapping)
	sql := "DELETE FROM \"instance_metadata\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from instance_metadata")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for instance_metadata")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q instanceMetadatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no instanceMetadatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from instance_metadata")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for instance_metadata")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InstanceMetadatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(instanceMetadatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), instanceMetadatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"instance_metadata\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, instanceMetadatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from instanceMetadatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for instance_metadata")
	}

	if len(instanceMetadatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *InstanceMetadatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindInstanceMetadatum(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InstanceMetadatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := InstanceMetadatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), instanceMetadatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"instance_metadata\".* FROM \"instance_metadata\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, instanceMetadatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in InstanceMetadatumSlice")
	}

	*o = slice

	return nil
}

// InstanceMetadatumExists checks if the InstanceMetadatum row exists.
func InstanceMetadatumExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"instance_metadata\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if instance_metadata exists")
	}

	return exists, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *InstanceMetadatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no instance_metadata provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(instanceMetadatumColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	instanceMetadatumUpsertCacheMut.RLock()
	cache, cached := instanceMetadatumUpsertCache[key]
	instanceMetadatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			instanceMetadatumAllColumns,
			instanceMetadatumColumnsWithDefault,
			instanceMetadatumColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			instanceMetadatumAllColumns,
			instanceMetadatumPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert instance_metadata, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(instanceMetadatumPrimaryKeyColumns))
			copy(conflict, instanceMetadatumPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"instance_metadata\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(instanceMetadatumType, instanceMetadatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(instanceMetadatumType, instanceMetadatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert instance_metadata")
	}

	if !cached {
		instanceMetadatumUpsertCacheMut.Lock()
		instanceMetadatumUpsertCache[key] = cache
		instanceMetadatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
