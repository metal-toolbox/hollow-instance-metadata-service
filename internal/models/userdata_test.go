// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

func testUserdataUpsert(t *testing.T) {
	t.Parallel()

	if len(userdatumAllColumns) == len(userdatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Userdatum{}
	if err = randomize.Struct(seed, &o, userdatumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Userdatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Userdatum: %s", err)
	}

	count, err := Userdata().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userdatumDBTypes, false, userdatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Userdatum struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Userdatum: %s", err)
	}

	count, err = Userdata().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserdata(t *testing.T) {
	t.Parallel()

	query := Userdata()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserdataDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Userdatum{}
	if err = randomize.Struct(seed, o, userdatumDBTypes, true, userdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userdatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Userdata().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserdataQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Userdatum{}
	if err = randomize.Struct(seed, o, userdatumDBTypes, true, userdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userdatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Userdata().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Userdata().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserdataSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Userdatum{}
	if err = randomize.Struct(seed, o, userdatumDBTypes, true, userdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userdatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserdatumSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Userdata().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserdataExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Userdatum{}
	if err = randomize.Struct(seed, o, userdatumDBTypes, true, userdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userdatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserdatumExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Userdatum exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserdatumExists to return true, but got false.")
	}
}

func testUserdataFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Userdatum{}
	if err = randomize.Struct(seed, o, userdatumDBTypes, true, userdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userdatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userdatumFound, err := FindUserdatum(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if userdatumFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUserdataBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Userdatum{}
	if err = randomize.Struct(seed, o, userdatumDBTypes, true, userdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userdatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Userdata().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserdataOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Userdatum{}
	if err = randomize.Struct(seed, o, userdatumDBTypes, true, userdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userdatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Userdata().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserdataAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userdatumOne := &Userdatum{}
	userdatumTwo := &Userdatum{}
	if err = randomize.Struct(seed, userdatumOne, userdatumDBTypes, false, userdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userdatum struct: %s", err)
	}
	if err = randomize.Struct(seed, userdatumTwo, userdatumDBTypes, false, userdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userdatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userdatumOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userdatumTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Userdata().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserdataCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userdatumOne := &Userdatum{}
	userdatumTwo := &Userdatum{}
	if err = randomize.Struct(seed, userdatumOne, userdatumDBTypes, false, userdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userdatum struct: %s", err)
	}
	if err = randomize.Struct(seed, userdatumTwo, userdatumDBTypes, false, userdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userdatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userdatumOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userdatumTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Userdata().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func userdatumBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Userdatum) error {
	*o = Userdatum{}
	return nil
}

func userdatumAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Userdatum) error {
	*o = Userdatum{}
	return nil
}

func userdatumAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Userdatum) error {
	*o = Userdatum{}
	return nil
}

func userdatumBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Userdatum) error {
	*o = Userdatum{}
	return nil
}

func userdatumAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Userdatum) error {
	*o = Userdatum{}
	return nil
}

func userdatumBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Userdatum) error {
	*o = Userdatum{}
	return nil
}

func userdatumAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Userdatum) error {
	*o = Userdatum{}
	return nil
}

func userdatumBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Userdatum) error {
	*o = Userdatum{}
	return nil
}

func userdatumAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Userdatum) error {
	*o = Userdatum{}
	return nil
}

func testUserdataHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Userdatum{}
	o := &Userdatum{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userdatumDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Userdatum object: %s", err)
	}

	AddUserdatumHook(boil.BeforeInsertHook, userdatumBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userdatumBeforeInsertHooks = []UserdatumHook{}

	AddUserdatumHook(boil.AfterInsertHook, userdatumAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userdatumAfterInsertHooks = []UserdatumHook{}

	AddUserdatumHook(boil.AfterSelectHook, userdatumAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userdatumAfterSelectHooks = []UserdatumHook{}

	AddUserdatumHook(boil.BeforeUpdateHook, userdatumBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userdatumBeforeUpdateHooks = []UserdatumHook{}

	AddUserdatumHook(boil.AfterUpdateHook, userdatumAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userdatumAfterUpdateHooks = []UserdatumHook{}

	AddUserdatumHook(boil.BeforeDeleteHook, userdatumBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userdatumBeforeDeleteHooks = []UserdatumHook{}

	AddUserdatumHook(boil.AfterDeleteHook, userdatumAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userdatumAfterDeleteHooks = []UserdatumHook{}

	AddUserdatumHook(boil.BeforeUpsertHook, userdatumBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userdatumBeforeUpsertHooks = []UserdatumHook{}

	AddUserdatumHook(boil.AfterUpsertHook, userdatumAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userdatumAfterUpsertHooks = []UserdatumHook{}
}

func testUserdataInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Userdatum{}
	if err = randomize.Struct(seed, o, userdatumDBTypes, true, userdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userdatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Userdata().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserdataInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Userdatum{}
	if err = randomize.Struct(seed, o, userdatumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Userdatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(userdatumColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Userdata().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserdataReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Userdatum{}
	if err = randomize.Struct(seed, o, userdatumDBTypes, true, userdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userdatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserdataReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Userdatum{}
	if err = randomize.Struct(seed, o, userdatumDBTypes, true, userdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userdatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserdatumSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserdataSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Userdatum{}
	if err = randomize.Struct(seed, o, userdatumDBTypes, true, userdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userdatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Userdata().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userdatumDBTypes = map[string]string{`ID`: `uuid`, `Userdata`: `bytes`, `CreatedAt`: `timestamptz`, `UpdatedAt`: `timestamptz`}
	_                = bytes.MinRead
)

func testUserdataUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userdatumPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userdatumAllColumns) == len(userdatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Userdatum{}
	if err = randomize.Struct(seed, o, userdatumDBTypes, true, userdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userdatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Userdata().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userdatumDBTypes, true, userdatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Userdatum struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserdataSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userdatumAllColumns) == len(userdatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Userdatum{}
	if err = randomize.Struct(seed, o, userdatumDBTypes, true, userdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userdatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Userdata().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userdatumDBTypes, true, userdatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Userdatum struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userdatumAllColumns, userdatumPrimaryKeyColumns) {
		fields = userdatumAllColumns
	} else {
		fields = strmangle.SetComplement(
			userdatumAllColumns,
			userdatumPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserdatumSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
