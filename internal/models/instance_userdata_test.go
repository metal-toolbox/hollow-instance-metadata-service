// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

func testInstanceUserdataUpsert(t *testing.T) {
	t.Parallel()

	if len(instanceUserdatumAllColumns) == len(instanceUserdatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := InstanceUserdatum{}
	if err = randomize.Struct(seed, &o, instanceUserdatumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize InstanceUserdatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert InstanceUserdatum: %s", err)
	}

	count, err := InstanceUserdata().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, instanceUserdatumDBTypes, false, instanceUserdatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InstanceUserdatum struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert InstanceUserdatum: %s", err)
	}

	count, err = InstanceUserdata().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testInstanceUserdata(t *testing.T) {
	t.Parallel()

	query := InstanceUserdata()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testInstanceUserdataDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InstanceUserdatum{}
	if err = randomize.Struct(seed, o, instanceUserdatumDBTypes, true, instanceUserdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstanceUserdatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InstanceUserdata().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInstanceUserdataQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InstanceUserdatum{}
	if err = randomize.Struct(seed, o, instanceUserdatumDBTypes, true, instanceUserdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstanceUserdatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := InstanceUserdata().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InstanceUserdata().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInstanceUserdataSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InstanceUserdatum{}
	if err = randomize.Struct(seed, o, instanceUserdatumDBTypes, true, instanceUserdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstanceUserdatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InstanceUserdatumSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InstanceUserdata().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInstanceUserdataExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InstanceUserdatum{}
	if err = randomize.Struct(seed, o, instanceUserdatumDBTypes, true, instanceUserdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstanceUserdatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := InstanceUserdatumExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if InstanceUserdatum exists: %s", err)
	}
	if !e {
		t.Errorf("Expected InstanceUserdatumExists to return true, but got false.")
	}
}

func testInstanceUserdataFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InstanceUserdatum{}
	if err = randomize.Struct(seed, o, instanceUserdatumDBTypes, true, instanceUserdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstanceUserdatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	instanceUserdatumFound, err := FindInstanceUserdatum(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if instanceUserdatumFound == nil {
		t.Error("want a record, got nil")
	}
}

func testInstanceUserdataBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InstanceUserdatum{}
	if err = randomize.Struct(seed, o, instanceUserdatumDBTypes, true, instanceUserdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstanceUserdatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = InstanceUserdata().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testInstanceUserdataOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InstanceUserdatum{}
	if err = randomize.Struct(seed, o, instanceUserdatumDBTypes, true, instanceUserdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstanceUserdatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := InstanceUserdata().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testInstanceUserdataAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instanceUserdatumOne := &InstanceUserdatum{}
	instanceUserdatumTwo := &InstanceUserdatum{}
	if err = randomize.Struct(seed, instanceUserdatumOne, instanceUserdatumDBTypes, false, instanceUserdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstanceUserdatum struct: %s", err)
	}
	if err = randomize.Struct(seed, instanceUserdatumTwo, instanceUserdatumDBTypes, false, instanceUserdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstanceUserdatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = instanceUserdatumOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = instanceUserdatumTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := InstanceUserdata().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testInstanceUserdataCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	instanceUserdatumOne := &InstanceUserdatum{}
	instanceUserdatumTwo := &InstanceUserdatum{}
	if err = randomize.Struct(seed, instanceUserdatumOne, instanceUserdatumDBTypes, false, instanceUserdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstanceUserdatum struct: %s", err)
	}
	if err = randomize.Struct(seed, instanceUserdatumTwo, instanceUserdatumDBTypes, false, instanceUserdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstanceUserdatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = instanceUserdatumOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = instanceUserdatumTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InstanceUserdata().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func instanceUserdatumBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *InstanceUserdatum) error {
	*o = InstanceUserdatum{}
	return nil
}

func instanceUserdatumAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *InstanceUserdatum) error {
	*o = InstanceUserdatum{}
	return nil
}

func instanceUserdatumAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *InstanceUserdatum) error {
	*o = InstanceUserdatum{}
	return nil
}

func instanceUserdatumBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *InstanceUserdatum) error {
	*o = InstanceUserdatum{}
	return nil
}

func instanceUserdatumAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *InstanceUserdatum) error {
	*o = InstanceUserdatum{}
	return nil
}

func instanceUserdatumBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *InstanceUserdatum) error {
	*o = InstanceUserdatum{}
	return nil
}

func instanceUserdatumAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *InstanceUserdatum) error {
	*o = InstanceUserdatum{}
	return nil
}

func instanceUserdatumBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *InstanceUserdatum) error {
	*o = InstanceUserdatum{}
	return nil
}

func instanceUserdatumAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *InstanceUserdatum) error {
	*o = InstanceUserdatum{}
	return nil
}

func testInstanceUserdataHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &InstanceUserdatum{}
	o := &InstanceUserdatum{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, instanceUserdatumDBTypes, false); err != nil {
		t.Errorf("Unable to randomize InstanceUserdatum object: %s", err)
	}

	AddInstanceUserdatumHook(boil.BeforeInsertHook, instanceUserdatumBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	instanceUserdatumBeforeInsertHooks = []InstanceUserdatumHook{}

	AddInstanceUserdatumHook(boil.AfterInsertHook, instanceUserdatumAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	instanceUserdatumAfterInsertHooks = []InstanceUserdatumHook{}

	AddInstanceUserdatumHook(boil.AfterSelectHook, instanceUserdatumAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	instanceUserdatumAfterSelectHooks = []InstanceUserdatumHook{}

	AddInstanceUserdatumHook(boil.BeforeUpdateHook, instanceUserdatumBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	instanceUserdatumBeforeUpdateHooks = []InstanceUserdatumHook{}

	AddInstanceUserdatumHook(boil.AfterUpdateHook, instanceUserdatumAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	instanceUserdatumAfterUpdateHooks = []InstanceUserdatumHook{}

	AddInstanceUserdatumHook(boil.BeforeDeleteHook, instanceUserdatumBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	instanceUserdatumBeforeDeleteHooks = []InstanceUserdatumHook{}

	AddInstanceUserdatumHook(boil.AfterDeleteHook, instanceUserdatumAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	instanceUserdatumAfterDeleteHooks = []InstanceUserdatumHook{}

	AddInstanceUserdatumHook(boil.BeforeUpsertHook, instanceUserdatumBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	instanceUserdatumBeforeUpsertHooks = []InstanceUserdatumHook{}

	AddInstanceUserdatumHook(boil.AfterUpsertHook, instanceUserdatumAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	instanceUserdatumAfterUpsertHooks = []InstanceUserdatumHook{}
}

func testInstanceUserdataInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InstanceUserdatum{}
	if err = randomize.Struct(seed, o, instanceUserdatumDBTypes, true, instanceUserdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstanceUserdatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InstanceUserdata().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInstanceUserdataInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InstanceUserdatum{}
	if err = randomize.Struct(seed, o, instanceUserdatumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize InstanceUserdatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(instanceUserdatumColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := InstanceUserdata().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInstanceUserdataReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InstanceUserdatum{}
	if err = randomize.Struct(seed, o, instanceUserdatumDBTypes, true, instanceUserdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstanceUserdatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInstanceUserdataReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InstanceUserdatum{}
	if err = randomize.Struct(seed, o, instanceUserdatumDBTypes, true, instanceUserdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstanceUserdatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InstanceUserdatumSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInstanceUserdataSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InstanceUserdatum{}
	if err = randomize.Struct(seed, o, instanceUserdatumDBTypes, true, instanceUserdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstanceUserdatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := InstanceUserdata().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	instanceUserdatumDBTypes = map[string]string{`ID`: `uuid`, `Userdata`: `bytes`, `CreatedAt`: `timestamptz`, `UpdatedAt`: `timestamptz`}
	_                        = bytes.MinRead
)

func testInstanceUserdataUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(instanceUserdatumPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(instanceUserdatumAllColumns) == len(instanceUserdatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &InstanceUserdatum{}
	if err = randomize.Struct(seed, o, instanceUserdatumDBTypes, true, instanceUserdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstanceUserdatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InstanceUserdata().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, instanceUserdatumDBTypes, true, instanceUserdatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InstanceUserdatum struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testInstanceUserdataSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(instanceUserdatumAllColumns) == len(instanceUserdatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &InstanceUserdatum{}
	if err = randomize.Struct(seed, o, instanceUserdatumDBTypes, true, instanceUserdatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstanceUserdatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InstanceUserdata().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, instanceUserdatumDBTypes, true, instanceUserdatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InstanceUserdatum struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(instanceUserdatumAllColumns, instanceUserdatumPrimaryKeyColumns) {
		fields = instanceUserdatumAllColumns
	} else {
		fields = strmangle.SetComplement(
			instanceUserdatumAllColumns,
			instanceUserdatumPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := InstanceUserdatumSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
