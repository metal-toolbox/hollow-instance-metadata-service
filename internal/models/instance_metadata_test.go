// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

func testInstanceMetadataUpsert(t *testing.T) {
	t.Parallel()

	if len(instanceMetadatumAllColumns) == len(instanceMetadatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := InstanceMetadatum{}
	if err = randomize.Struct(seed, &o, instanceMetadatumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize InstanceMetadatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert InstanceMetadatum: %s", err)
	}

	count, err := InstanceMetadata().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, instanceMetadatumDBTypes, false, instanceMetadatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InstanceMetadatum struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert InstanceMetadatum: %s", err)
	}

	count, err = InstanceMetadata().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testInstanceMetadata(t *testing.T) {
	t.Parallel()

	query := InstanceMetadata()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testInstanceMetadataDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InstanceMetadatum{}
	if err = randomize.Struct(seed, o, instanceMetadatumDBTypes, true, instanceMetadatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstanceMetadatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InstanceMetadata().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInstanceMetadataQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InstanceMetadatum{}
	if err = randomize.Struct(seed, o, instanceMetadatumDBTypes, true, instanceMetadatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstanceMetadatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := InstanceMetadata().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InstanceMetadata().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInstanceMetadataSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InstanceMetadatum{}
	if err = randomize.Struct(seed, o, instanceMetadatumDBTypes, true, instanceMetadatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstanceMetadatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InstanceMetadatumSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InstanceMetadata().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInstanceMetadataExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InstanceMetadatum{}
	if err = randomize.Struct(seed, o, instanceMetadatumDBTypes, true, instanceMetadatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstanceMetadatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := InstanceMetadatumExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if InstanceMetadatum exists: %s", err)
	}
	if !e {
		t.Errorf("Expected InstanceMetadatumExists to return true, but got false.")
	}
}

func testInstanceMetadataFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InstanceMetadatum{}
	if err = randomize.Struct(seed, o, instanceMetadatumDBTypes, true, instanceMetadatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstanceMetadatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	instanceMetadatumFound, err := FindInstanceMetadatum(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if instanceMetadatumFound == nil {
		t.Error("want a record, got nil")
	}
}

func testInstanceMetadataBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InstanceMetadatum{}
	if err = randomize.Struct(seed, o, instanceMetadatumDBTypes, true, instanceMetadatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstanceMetadatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = InstanceMetadata().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testInstanceMetadataOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InstanceMetadatum{}
	if err = randomize.Struct(seed, o, instanceMetadatumDBTypes, true, instanceMetadatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstanceMetadatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := InstanceMetadata().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testInstanceMetadataAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	instanceMetadatumOne := &InstanceMetadatum{}
	instanceMetadatumTwo := &InstanceMetadatum{}
	if err = randomize.Struct(seed, instanceMetadatumOne, instanceMetadatumDBTypes, false, instanceMetadatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstanceMetadatum struct: %s", err)
	}
	if err = randomize.Struct(seed, instanceMetadatumTwo, instanceMetadatumDBTypes, false, instanceMetadatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstanceMetadatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = instanceMetadatumOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = instanceMetadatumTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := InstanceMetadata().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testInstanceMetadataCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	instanceMetadatumOne := &InstanceMetadatum{}
	instanceMetadatumTwo := &InstanceMetadatum{}
	if err = randomize.Struct(seed, instanceMetadatumOne, instanceMetadatumDBTypes, false, instanceMetadatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstanceMetadatum struct: %s", err)
	}
	if err = randomize.Struct(seed, instanceMetadatumTwo, instanceMetadatumDBTypes, false, instanceMetadatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstanceMetadatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = instanceMetadatumOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = instanceMetadatumTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InstanceMetadata().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func instanceMetadatumBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *InstanceMetadatum) error {
	*o = InstanceMetadatum{}
	return nil
}

func instanceMetadatumAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *InstanceMetadatum) error {
	*o = InstanceMetadatum{}
	return nil
}

func instanceMetadatumAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *InstanceMetadatum) error {
	*o = InstanceMetadatum{}
	return nil
}

func instanceMetadatumBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *InstanceMetadatum) error {
	*o = InstanceMetadatum{}
	return nil
}

func instanceMetadatumAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *InstanceMetadatum) error {
	*o = InstanceMetadatum{}
	return nil
}

func instanceMetadatumBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *InstanceMetadatum) error {
	*o = InstanceMetadatum{}
	return nil
}

func instanceMetadatumAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *InstanceMetadatum) error {
	*o = InstanceMetadatum{}
	return nil
}

func instanceMetadatumBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *InstanceMetadatum) error {
	*o = InstanceMetadatum{}
	return nil
}

func instanceMetadatumAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *InstanceMetadatum) error {
	*o = InstanceMetadatum{}
	return nil
}

func testInstanceMetadataHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &InstanceMetadatum{}
	o := &InstanceMetadatum{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, instanceMetadatumDBTypes, false); err != nil {
		t.Errorf("Unable to randomize InstanceMetadatum object: %s", err)
	}

	AddInstanceMetadatumHook(boil.BeforeInsertHook, instanceMetadatumBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	instanceMetadatumBeforeInsertHooks = []InstanceMetadatumHook{}

	AddInstanceMetadatumHook(boil.AfterInsertHook, instanceMetadatumAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	instanceMetadatumAfterInsertHooks = []InstanceMetadatumHook{}

	AddInstanceMetadatumHook(boil.AfterSelectHook, instanceMetadatumAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	instanceMetadatumAfterSelectHooks = []InstanceMetadatumHook{}

	AddInstanceMetadatumHook(boil.BeforeUpdateHook, instanceMetadatumBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	instanceMetadatumBeforeUpdateHooks = []InstanceMetadatumHook{}

	AddInstanceMetadatumHook(boil.AfterUpdateHook, instanceMetadatumAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	instanceMetadatumAfterUpdateHooks = []InstanceMetadatumHook{}

	AddInstanceMetadatumHook(boil.BeforeDeleteHook, instanceMetadatumBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	instanceMetadatumBeforeDeleteHooks = []InstanceMetadatumHook{}

	AddInstanceMetadatumHook(boil.AfterDeleteHook, instanceMetadatumAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	instanceMetadatumAfterDeleteHooks = []InstanceMetadatumHook{}

	AddInstanceMetadatumHook(boil.BeforeUpsertHook, instanceMetadatumBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	instanceMetadatumBeforeUpsertHooks = []InstanceMetadatumHook{}

	AddInstanceMetadatumHook(boil.AfterUpsertHook, instanceMetadatumAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	instanceMetadatumAfterUpsertHooks = []InstanceMetadatumHook{}
}

func testInstanceMetadataInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InstanceMetadatum{}
	if err = randomize.Struct(seed, o, instanceMetadatumDBTypes, true, instanceMetadatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstanceMetadatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InstanceMetadata().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInstanceMetadataInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InstanceMetadatum{}
	if err = randomize.Struct(seed, o, instanceMetadatumDBTypes, true); err != nil {
		t.Errorf("Unable to randomize InstanceMetadatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(instanceMetadatumColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := InstanceMetadata().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInstanceMetadataReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InstanceMetadatum{}
	if err = randomize.Struct(seed, o, instanceMetadatumDBTypes, true, instanceMetadatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstanceMetadatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInstanceMetadataReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InstanceMetadatum{}
	if err = randomize.Struct(seed, o, instanceMetadatumDBTypes, true, instanceMetadatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstanceMetadatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InstanceMetadatumSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInstanceMetadataSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InstanceMetadatum{}
	if err = randomize.Struct(seed, o, instanceMetadatumDBTypes, true, instanceMetadatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstanceMetadatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := InstanceMetadata().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	instanceMetadatumDBTypes = map[string]string{`ID`: `uuid`, `Metadata`: `jsonb`, `CreatedAt`: `timestamptz`, `UpdatedAt`: `timestamptz`}
	_                        = bytes.MinRead
)

func testInstanceMetadataUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(instanceMetadatumPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(instanceMetadatumAllColumns) == len(instanceMetadatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &InstanceMetadatum{}
	if err = randomize.Struct(seed, o, instanceMetadatumDBTypes, true, instanceMetadatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstanceMetadatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InstanceMetadata().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, instanceMetadatumDBTypes, true, instanceMetadatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InstanceMetadatum struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testInstanceMetadataSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(instanceMetadatumAllColumns) == len(instanceMetadatumPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &InstanceMetadatum{}
	if err = randomize.Struct(seed, o, instanceMetadatumDBTypes, true, instanceMetadatumColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InstanceMetadatum struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InstanceMetadata().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, instanceMetadatumDBTypes, true, instanceMetadatumPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InstanceMetadatum struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(instanceMetadatumAllColumns, instanceMetadatumPrimaryKeyColumns) {
		fields = instanceMetadatumAllColumns
	} else {
		fields = strmangle.SetComplement(
			instanceMetadatumAllColumns,
			instanceMetadatumPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := InstanceMetadatumSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
