// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// InstanceUserdatum is an object representing the database table.
type InstanceUserdatum struct {
	ID        string     `boil:"id" json:"id" toml:"id" yaml:"id"`
	Userdata  null.Bytes `boil:"userdata" json:"userdata,omitempty" toml:"userdata" yaml:"userdata,omitempty"`
	CreatedAt time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time  `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *instanceUserdatumR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L instanceUserdatumL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InstanceUserdatumColumns = struct {
	ID        string
	Userdata  string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Userdata:  "userdata",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var InstanceUserdatumTableColumns = struct {
	ID        string
	Userdata  string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "instance_userdata.id",
	Userdata:  "instance_userdata.userdata",
	CreatedAt: "instance_userdata.created_at",
	UpdatedAt: "instance_userdata.updated_at",
}

// Generated where

type whereHelpernull_Bytes struct{ field string }

func (w whereHelpernull_Bytes) EQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Bytes) NEQ(x null.Bytes) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Bytes) LT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Bytes) LTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Bytes) GT(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Bytes) GTE(x null.Bytes) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Bytes) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Bytes) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var InstanceUserdatumWhere = struct {
	ID        whereHelperstring
	Userdata  whereHelpernull_Bytes
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "\"instance_userdata\".\"id\""},
	Userdata:  whereHelpernull_Bytes{field: "\"instance_userdata\".\"userdata\""},
	CreatedAt: whereHelpertime_Time{field: "\"instance_userdata\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"instance_userdata\".\"updated_at\""},
}

// InstanceUserdatumRels is where relationship names are stored.
var InstanceUserdatumRels = struct {
}{}

// instanceUserdatumR is where relationships are stored.
type instanceUserdatumR struct {
}

// NewStruct creates a new relationship struct
func (*instanceUserdatumR) NewStruct() *instanceUserdatumR {
	return &instanceUserdatumR{}
}

// instanceUserdatumL is where Load methods for each relationship are stored.
type instanceUserdatumL struct{}

var (
	instanceUserdatumAllColumns            = []string{"id", "userdata", "created_at", "updated_at"}
	instanceUserdatumColumnsWithoutDefault = []string{"id", "created_at", "updated_at"}
	instanceUserdatumColumnsWithDefault    = []string{"userdata"}
	instanceUserdatumPrimaryKeyColumns     = []string{"id"}
	instanceUserdatumGeneratedColumns      = []string{}
)

type (
	// InstanceUserdatumSlice is an alias for a slice of pointers to InstanceUserdatum.
	// This should almost always be used instead of []InstanceUserdatum.
	InstanceUserdatumSlice []*InstanceUserdatum
	// InstanceUserdatumHook is the signature for custom InstanceUserdatum hook methods
	InstanceUserdatumHook func(context.Context, boil.ContextExecutor, *InstanceUserdatum) error

	instanceUserdatumQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	instanceUserdatumType                 = reflect.TypeOf(&InstanceUserdatum{})
	instanceUserdatumMapping              = queries.MakeStructMapping(instanceUserdatumType)
	instanceUserdatumPrimaryKeyMapping, _ = queries.BindMapping(instanceUserdatumType, instanceUserdatumMapping, instanceUserdatumPrimaryKeyColumns)
	instanceUserdatumInsertCacheMut       sync.RWMutex
	instanceUserdatumInsertCache          = make(map[string]insertCache)
	instanceUserdatumUpdateCacheMut       sync.RWMutex
	instanceUserdatumUpdateCache          = make(map[string]updateCache)
	instanceUserdatumUpsertCacheMut       sync.RWMutex
	instanceUserdatumUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var instanceUserdatumAfterSelectHooks []InstanceUserdatumHook

var instanceUserdatumBeforeInsertHooks []InstanceUserdatumHook
var instanceUserdatumAfterInsertHooks []InstanceUserdatumHook

var instanceUserdatumBeforeUpdateHooks []InstanceUserdatumHook
var instanceUserdatumAfterUpdateHooks []InstanceUserdatumHook

var instanceUserdatumBeforeDeleteHooks []InstanceUserdatumHook
var instanceUserdatumAfterDeleteHooks []InstanceUserdatumHook

var instanceUserdatumBeforeUpsertHooks []InstanceUserdatumHook
var instanceUserdatumAfterUpsertHooks []InstanceUserdatumHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *InstanceUserdatum) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range instanceUserdatumAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *InstanceUserdatum) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range instanceUserdatumBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *InstanceUserdatum) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range instanceUserdatumAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *InstanceUserdatum) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range instanceUserdatumBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *InstanceUserdatum) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range instanceUserdatumAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *InstanceUserdatum) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range instanceUserdatumBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *InstanceUserdatum) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range instanceUserdatumAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *InstanceUserdatum) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range instanceUserdatumBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *InstanceUserdatum) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range instanceUserdatumAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddInstanceUserdatumHook registers your hook function for all future operations.
func AddInstanceUserdatumHook(hookPoint boil.HookPoint, instanceUserdatumHook InstanceUserdatumHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		instanceUserdatumAfterSelectHooks = append(instanceUserdatumAfterSelectHooks, instanceUserdatumHook)
	case boil.BeforeInsertHook:
		instanceUserdatumBeforeInsertHooks = append(instanceUserdatumBeforeInsertHooks, instanceUserdatumHook)
	case boil.AfterInsertHook:
		instanceUserdatumAfterInsertHooks = append(instanceUserdatumAfterInsertHooks, instanceUserdatumHook)
	case boil.BeforeUpdateHook:
		instanceUserdatumBeforeUpdateHooks = append(instanceUserdatumBeforeUpdateHooks, instanceUserdatumHook)
	case boil.AfterUpdateHook:
		instanceUserdatumAfterUpdateHooks = append(instanceUserdatumAfterUpdateHooks, instanceUserdatumHook)
	case boil.BeforeDeleteHook:
		instanceUserdatumBeforeDeleteHooks = append(instanceUserdatumBeforeDeleteHooks, instanceUserdatumHook)
	case boil.AfterDeleteHook:
		instanceUserdatumAfterDeleteHooks = append(instanceUserdatumAfterDeleteHooks, instanceUserdatumHook)
	case boil.BeforeUpsertHook:
		instanceUserdatumBeforeUpsertHooks = append(instanceUserdatumBeforeUpsertHooks, instanceUserdatumHook)
	case boil.AfterUpsertHook:
		instanceUserdatumAfterUpsertHooks = append(instanceUserdatumAfterUpsertHooks, instanceUserdatumHook)
	}
}

// One returns a single instanceUserdatum record from the query.
func (q instanceUserdatumQuery) One(ctx context.Context, exec boil.ContextExecutor) (*InstanceUserdatum, error) {
	o := &InstanceUserdatum{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for instance_userdata")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all InstanceUserdatum records from the query.
func (q instanceUserdatumQuery) All(ctx context.Context, exec boil.ContextExecutor) (InstanceUserdatumSlice, error) {
	var o []*InstanceUserdatum

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to InstanceUserdatum slice")
	}

	if len(instanceUserdatumAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all InstanceUserdatum records in the query.
func (q instanceUserdatumQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count instance_userdata rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q instanceUserdatumQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if instance_userdata exists")
	}

	return count > 0, nil
}

// InstanceUserdata retrieves all the records using an executor.
func InstanceUserdata(mods ...qm.QueryMod) instanceUserdatumQuery {
	mods = append(mods, qm.From("\"instance_userdata\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"instance_userdata\".*"})
	}

	return instanceUserdatumQuery{q}
}

// FindInstanceUserdatum retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInstanceUserdatum(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*InstanceUserdatum, error) {
	instanceUserdatumObj := &InstanceUserdatum{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"instance_userdata\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, instanceUserdatumObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from instance_userdata")
	}

	if err = instanceUserdatumObj.doAfterSelectHooks(ctx, exec); err != nil {
		return instanceUserdatumObj, err
	}

	return instanceUserdatumObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *InstanceUserdatum) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no instance_userdata provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(instanceUserdatumColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	instanceUserdatumInsertCacheMut.RLock()
	cache, cached := instanceUserdatumInsertCache[key]
	instanceUserdatumInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			instanceUserdatumAllColumns,
			instanceUserdatumColumnsWithDefault,
			instanceUserdatumColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(instanceUserdatumType, instanceUserdatumMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(instanceUserdatumType, instanceUserdatumMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"instance_userdata\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"instance_userdata\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into instance_userdata")
	}

	if !cached {
		instanceUserdatumInsertCacheMut.Lock()
		instanceUserdatumInsertCache[key] = cache
		instanceUserdatumInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the InstanceUserdatum.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *InstanceUserdatum) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	instanceUserdatumUpdateCacheMut.RLock()
	cache, cached := instanceUserdatumUpdateCache[key]
	instanceUserdatumUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			instanceUserdatumAllColumns,
			instanceUserdatumPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update instance_userdata, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"instance_userdata\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, instanceUserdatumPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(instanceUserdatumType, instanceUserdatumMapping, append(wl, instanceUserdatumPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update instance_userdata row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for instance_userdata")
	}

	if !cached {
		instanceUserdatumUpdateCacheMut.Lock()
		instanceUserdatumUpdateCache[key] = cache
		instanceUserdatumUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q instanceUserdatumQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for instance_userdata")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for instance_userdata")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InstanceUserdatumSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), instanceUserdatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"instance_userdata\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, instanceUserdatumPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in instanceUserdatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all instanceUserdatum")
	}
	return rowsAff, nil
}

// Delete deletes a single InstanceUserdatum record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *InstanceUserdatum) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no InstanceUserdatum provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), instanceUserdatumPrimaryKeyMapping)
	sql := "DELETE FROM \"instance_userdata\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from instance_userdata")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for instance_userdata")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q instanceUserdatumQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no instanceUserdatumQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from instance_userdata")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for instance_userdata")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InstanceUserdatumSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(instanceUserdatumBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), instanceUserdatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"instance_userdata\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, instanceUserdatumPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from instanceUserdatum slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for instance_userdata")
	}

	if len(instanceUserdatumAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *InstanceUserdatum) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindInstanceUserdatum(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InstanceUserdatumSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := InstanceUserdatumSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), instanceUserdatumPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"instance_userdata\".* FROM \"instance_userdata\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, instanceUserdatumPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in InstanceUserdatumSlice")
	}

	*o = slice

	return nil
}

// InstanceUserdatumExists checks if the InstanceUserdatum row exists.
func InstanceUserdatumExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"instance_userdata\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if instance_userdata exists")
	}

	return exists, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *InstanceUserdatum) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no instance_userdata provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(instanceUserdatumColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	instanceUserdatumUpsertCacheMut.RLock()
	cache, cached := instanceUserdatumUpsertCache[key]
	instanceUserdatumUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			instanceUserdatumAllColumns,
			instanceUserdatumColumnsWithDefault,
			instanceUserdatumColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			instanceUserdatumAllColumns,
			instanceUserdatumPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert instance_userdata, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(instanceUserdatumPrimaryKeyColumns))
			copy(conflict, instanceUserdatumPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryCockroachDB(dialect, "\"instance_userdata\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(instanceUserdatumType, instanceUserdatumMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(instanceUserdatumType, instanceUserdatumMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		_, _ = fmt.Fprintln(boil.DebugWriter, cache.query)
		_, _ = fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // CockcorachDB doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert instance_userdata")
	}

	if !cached {
		instanceUserdatumUpsertCacheMut.Lock()
		instanceUserdatumUpsertCache[key] = cache
		instanceUserdatumUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
