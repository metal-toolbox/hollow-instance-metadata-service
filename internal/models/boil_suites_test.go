// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("InstanceIPAddresses", testInstanceIPAddresses)
	t.Run("Metadata", testMetadata)
	t.Run("Userdata", testUserdata)
}

func TestDelete(t *testing.T) {
	t.Run("InstanceIPAddresses", testInstanceIPAddressesDelete)
	t.Run("Metadata", testMetadataDelete)
	t.Run("Userdata", testUserdataDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("InstanceIPAddresses", testInstanceIPAddressesQueryDeleteAll)
	t.Run("Metadata", testMetadataQueryDeleteAll)
	t.Run("Userdata", testUserdataQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("InstanceIPAddresses", testInstanceIPAddressesSliceDeleteAll)
	t.Run("Metadata", testMetadataSliceDeleteAll)
	t.Run("Userdata", testUserdataSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("InstanceIPAddresses", testInstanceIPAddressesExists)
	t.Run("Metadata", testMetadataExists)
	t.Run("Userdata", testUserdataExists)
}

func TestFind(t *testing.T) {
	t.Run("InstanceIPAddresses", testInstanceIPAddressesFind)
	t.Run("Metadata", testMetadataFind)
	t.Run("Userdata", testUserdataFind)
}

func TestBind(t *testing.T) {
	t.Run("InstanceIPAddresses", testInstanceIPAddressesBind)
	t.Run("Metadata", testMetadataBind)
	t.Run("Userdata", testUserdataBind)
}

func TestOne(t *testing.T) {
	t.Run("InstanceIPAddresses", testInstanceIPAddressesOne)
	t.Run("Metadata", testMetadataOne)
	t.Run("Userdata", testUserdataOne)
}

func TestAll(t *testing.T) {
	t.Run("InstanceIPAddresses", testInstanceIPAddressesAll)
	t.Run("Metadata", testMetadataAll)
	t.Run("Userdata", testUserdataAll)
}

func TestCount(t *testing.T) {
	t.Run("InstanceIPAddresses", testInstanceIPAddressesCount)
	t.Run("Metadata", testMetadataCount)
	t.Run("Userdata", testUserdataCount)
}

func TestHooks(t *testing.T) {
	t.Run("InstanceIPAddresses", testInstanceIPAddressesHooks)
	t.Run("Metadata", testMetadataHooks)
	t.Run("Userdata", testUserdataHooks)
}

func TestInsert(t *testing.T) {
	t.Run("InstanceIPAddresses", testInstanceIPAddressesInsert)
	t.Run("InstanceIPAddresses", testInstanceIPAddressesInsertWhitelist)
	t.Run("Metadata", testMetadataInsert)
	t.Run("Metadata", testMetadataInsertWhitelist)
	t.Run("Userdata", testUserdataInsert)
	t.Run("Userdata", testUserdataInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("InstanceIPAddresses", testInstanceIPAddressesReload)
	t.Run("Metadata", testMetadataReload)
	t.Run("Userdata", testUserdataReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("InstanceIPAddresses", testInstanceIPAddressesReloadAll)
	t.Run("Metadata", testMetadataReloadAll)
	t.Run("Userdata", testUserdataReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("InstanceIPAddresses", testInstanceIPAddressesSelect)
	t.Run("Metadata", testMetadataSelect)
	t.Run("Userdata", testUserdataSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("InstanceIPAddresses", testInstanceIPAddressesUpdate)
	t.Run("Metadata", testMetadataUpdate)
	t.Run("Userdata", testUserdataUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("InstanceIPAddresses", testInstanceIPAddressesSliceUpdateAll)
	t.Run("Metadata", testMetadataSliceUpdateAll)
	t.Run("Userdata", testUserdataSliceUpdateAll)
}
